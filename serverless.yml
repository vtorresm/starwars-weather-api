service: starwars-weather-api
frameworkVersion: '3'
provider:
  name: aws
  runtime: nodejs20.x
  memorySize: 128
  timeout: 10
  environment:
    DYNAMODB_TABLE: ${self:service}-${sls:stage}-data
    CACHE_TABLE: ${self:service}-${sls:stage}-cache
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:PutItem
            - dynamodb:GetItem
            - dynamodb:Query
            - dynamodb:Scan
          Resource: "*"
  httpApi:
    authorizers:
      cognitoAuthorizer:
        type: jwt
        identitySource: $request.header.Authorization
        issuerUrl: https://cognito-idp.us-east-1.amazonaws.com/us-east-1_TvtkzQQj9
        audience:
          - 5m24kbogjpi8u1jgfvhfn3jtdk
functions:
  getFusedData:
    handler: src/handlers/fusedData.handler
    events:
      - http:
          path: /fusionados
          method: get
  storeData:
    handler: src/handlers/storeData.handler
    events:
      - http:
          path: /almacenar
          method: post
          authorizer:
            name: CognitoAuthorizer
            type: COGNITO_USER_POOLS
            arn: arn:aws:cognito-idp:us-east-1:324093102870:userpool/us-east-1_TvtkzQQj9
  getHistory:
    handler: src/handlers/history.handler
    events:
      - http:
          path: /historial
          method: get
          authorizer:
            name: CognitoAuthorizer
            type: COGNITO_USER_POOLS
            arn: arn:aws:cognito-idp:us-east-1:324093102870:userpool/us-east-1_TvtkzQQj9
resources:
  Resources:
    DataTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-${sls:stage}-data
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: timestamp
            AttributeType: N
        KeySchema:
          - AttributeName: id
            KeyType: HASH
          - AttributeName: timestamp
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
    CacheTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-${sls:stage}-cache
        AttributeDefinitions:
          - AttributeName: cacheKey
            AttributeType: S
        KeySchema:
          - AttributeName: cacheKey
            KeyType: HASH
        TimeToLiveSpecification:
          AttributeName: ttl
          Enabled: true
        BillingMode: PAY_PER_REQUEST
    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: ${self:service}-${sls:stage}-user-pool
        Policies:
          PasswordPolicy:
            MinimumLength: 8
    CognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        UserPoolId: !Ref CognitoUserPool
        ClientName: ${self:service}-${sls:stage}-client
plugins:
  - serverless-dotenv-plugin
  - serverless-offline
  - serverless-plugin-typescript
